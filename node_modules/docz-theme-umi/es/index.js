function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { theme, ComponentsProvider } from 'docz';
import get from 'lodash/get';
import * as modes from "./styles/modes";
import { components } from "./components/ui";
import { Global } from "./styles/global";
import { config } from "./config";
import { ThemeProvider } from "./utils/theme";

var Theme = function Theme(_ref) {
  var children = _ref.children;
  return React.createElement(ThemeProvider, null, React.createElement(Global, null), React.createElement(ComponentsProvider, {
    components: components
  }, children));
};

export var enhance = theme(config, function (_ref2) {
  var mode = _ref2.mode,
      codemirrorTheme = _ref2.codemirrorTheme,
      config = _objectWithoutProperties(_ref2, ["mode", "codemirrorTheme"]);

  return _objectSpread({}, config, {
    mode: mode,
    codemirrorTheme: codemirrorTheme || "docz-".concat(mode),
    colors: _objectSpread({}, get(modes, mode), config.colors)
  });
});
export default enhance(Theme);
export { components };