function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { useMemo } from 'react';
import { useConfig, useDocs } from 'docz';
import styled from 'styled-components';
import { get } from "../../utils/theme";
export var LinkStyled = styled.a.withConfig({
  displayName: "Link__LinkStyled"
})(["&,&:visited,&:active{text-decoration:none;color:", ";}&:hover{color:", ";}", ";"], get('colors.link'), get('colors.link'), get('styles.link'));
export var Link = function Link(_ref) {
  var href = _ref.href,
      props = _objectWithoutProperties(_ref, ["href"]);

  var _useConfig = useConfig(),
      separator = _useConfig.separator,
      Link = _useConfig.linkComponent;

  var docs = useDocs();
  var toCheck = useMemo(function () {
    return [location.pathname.split(separator).slice(0, -1).join(separator).slice(1), (href || '').replace(/^(?:\.\/)+/gi, '')].join('/');
  }, [separator]);
  var matched = docs && docs.find(function (doc) {
    return doc.filepath === toCheck;
  });
  var nHref = matched ? matched.route : href;
  var isInternal = nHref && nHref.startsWith('/');
  return isInternal ? React.createElement(LinkStyled, _extends({
    as: Link
  }, props, {
    to: nHref
  })) : React.createElement(LinkStyled, _extends({}, props, {
    href: nHref
  }));
};