function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import BaseCheck from 'react-feather/dist/icons/check';
import Clipboard from 'react-feather/dist/icons/clipboard';
import rgba from 'polished/lib/color/rgba';
import copy from 'copy-text-to-clipboard';
import styled from 'styled-components';
import { ButtonSwap } from "./ButtonSwap";
import { get } from "../../../utils/theme";
var textColor = get('colors.text', '#2D3747');
export var ActionButton = styled(ButtonSwap).withConfig({
  displayName: "elements__ActionButton"
})(["padding:4px;background:transparent;font-size:12px;text-transform:uppercase;transition:color 0.3s;&,& a{color:", ";}&:hover,& a:hover{color:", ";}"], function (p) {
  return rgba(textColor(p), 0.4);
}, function (p) {
  return rgba(textColor(p), 0.7);
});
var Check = styled(BaseCheck).withConfig({
  displayName: "elements__Check"
})(["stroke:", ";"], get('colors.primary'));
export var ClipboardAction = function ClipboardAction(_ref) {
  var content = _ref.content,
      props = _objectWithoutProperties(_ref, ["content"]);

  return React.createElement(ActionButton, _extends({}, props, {
    title: "Copy to clipboard",
    onClick: function onClick() {
      return copy(content);
    },
    swap: React.createElement(Check, {
      width: 17
    })
  }), React.createElement(Clipboard, {
    width: 15
  }));
};