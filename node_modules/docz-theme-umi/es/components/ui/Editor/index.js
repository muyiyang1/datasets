function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { useMemo, useCallback, useState } from 'react';
import { useConfig } from 'docz';
import styled from 'styled-components';
import getter from 'lodash/get';
import { ClipboardAction } from "./elements";
import { get } from "../../../utils/theme";
var CodeMirror = React.lazy(function () {
  return import("../CodeMirror");
});

var getLanguage = function getLanguage(children) {
  var defaultLanguage = 'jsx';
  if (typeof children === 'string') return defaultLanguage;
  var language = getter(children, 'props.props.className') || defaultLanguage;
  var result = language.replace('language-', '');
  if (result === 'js' || result === 'javascript') return 'jsx';

  if (result === 'ts' || result === 'tsx' || result === 'typescript') {
    return 'text/typescript';
  }

  return result;
};

var getChildren = function getChildren(children) {
  return children && typeof children !== 'string' ? getter(children, 'props.children') : children;
};

var Wrapper = styled.div.withConfig({
  displayName: "Editor__Wrapper"
})(["margin:30px 0;position:relative;width:100%;border:1px solid ", ";"], get('colors.border'));
var Actions = styled.div.withConfig({
  displayName: "Editor__Actions"
})(["z-index:999;position:absolute;top:0;right:0;display:flex;flex-direction:column;align-items:center;padding:5px 10px;background:transparent;"]);
export var Editor = function Editor(_ref) {
  var mode = _ref.mode,
      children = _ref.children,
      actions = _ref.actions,
      onChange = _ref.onChange,
      className = _ref.className,
      editorClassName = _ref.editorClassName,
      defaultLanguage = _ref.language,
      props = _objectWithoutProperties(_ref, ["mode", "children", "actions", "onChange", "className", "editorClassName", "language"]);

  var config = useConfig();
  var initialCode = useMemo(function () {
    return getChildren(children);
  }, [children]);

  var _useState = useState(initialCode),
      _useState2 = _slicedToArray(_useState, 2),
      code = _useState2[0],
      setCode = _useState2[1];

  var language = defaultLanguage || getLanguage(children);

  var options = _objectSpread({}, props, {
    tabSize: 2,
    mode: language || mode,
    lineNumbers: true,
    lineWrapping: true,
    autoCloseTags: true,
    theme: 'docz-light'
  });

  var onEditorDidMount = function onEditorDidMount(editor) {
    if (editor) removeLastLine(editor);
  };

  var removeLastLine = useCallback(function (editor) {
    if (editor && !props.withLastLine && props.readOnly) {
      var lastLine = editor.lastLine();
      editor.doc.replaceRange('', {
        line: lastLine - 1
      }, {
        line: lastLine
      });
    }
  }, [props.withLastLine, props.readOnly]);
  var handleChange = useCallback(function (editor, data, code) {
    onChange && onChange(code);
    setCode(code);
  }, [code]);

  var editorProps = function editorProps(config) {
    return {
      value: code,
      className: editorClassName,
      editorDidMount: onEditorDidMount,
      onBeforeChange: handleChange,
      options: _objectSpread({}, options, {
        theme: config && config.themeConfig ? config.themeConfig.codemirrorTheme : options.theme
      })
    };
  };

  return React.createElement(Wrapper, {
    className: className
  }, React.createElement(React.Suspense, {
    fallback: null
  }, React.createElement(CodeMirror, editorProps(config))), React.createElement(Actions, null, actions || React.createElement(ClipboardAction, {
    content: code
  })));
};
Editor.defaultProps = {
  mode: 'js',
  readOnly: true,
  matchBrackets: true,
  indentUnit: 2
};