function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import { useMemo } from 'react';
import { useComponents } from 'docz';
import styled from 'styled-components';
import { get } from "../../utils/theme";
var Wrapper = styled.div.withConfig({
  displayName: "Props__Wrapper"
})(["display:flex;flex-direction:column;& ~ &{margin-top:20px;}"]);
var Title = styled.div.withConfig({
  displayName: "Props__Title"
})(["display:flex;border-bottom:1px solid ", ";"], get('colors.sidebarBg'));
var PropName = styled.span.withConfig({
  displayName: "Props__PropName"
})(["background:", ";color:", ";padding:5px 10px;border-radius:4px 4px 0 0;font-size:16px;font-weight:500;& ~ &{margin-left:5px;}"], get('colors.sidebarBg'), get('colors.primary'));
var PropType = styled(PropName).withConfig({
  displayName: "Props__PropType"
})(["color:", ";background:", ";font-weight:400;"], get('colors.blockquoteColor'), get('colors.sidebarBg'));
var PropDefaultValue = styled(PropType).withConfig({
  displayName: "Props__PropDefaultValue"
})(["background:transparent;padding-left:0;padding-right:0;"]);
var PropRequired = styled(PropType).withConfig({
  displayName: "Props__PropRequired"
})(["flex:1;text-align:right;background:transparent;color:", ";opacity:0.5;"], get('colors.blockquoteColor'));
export var Props = function Props(_ref) {
  var props = _ref.props,
      getPropType = _ref.getPropType;
  var entries = Object.entries(props);
  var components = useComponents();
  var Paragraph = useMemo(function () {
    return styled(components.P || 'p').withConfig({
      displayName: "Props"
    })(["font-size:16px;color:", ";"], get('colors.sidebarTex'));
  }, []);
  return React.createElement(React.Fragment, null, entries.map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        key = _ref3[0],
        prop = _ref3[1];

    if (!prop.type && !prop.flowType) return null;
    return React.createElement(Wrapper, {
      key: key
    }, React.createElement(Title, null, React.createElement(PropName, null, key), React.createElement(PropType, null, getPropType(prop)), prop.defaultValue && React.createElement(PropDefaultValue, null, prop.defaultValue.value === "''" ? React.createElement("em", null, "= [Empty String]") : React.createElement("em", null, "= ", prop.defaultValue.value.replace(/\'/g, '"'))), prop.required && React.createElement(PropRequired, null, React.createElement("em", null, "required"))), prop.description && React.createElement(Paragraph, null, prop.description));
  }));
};