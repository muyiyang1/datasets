function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { useEffect, useRef } from 'react';
import { useConfig } from 'docz';
import { Controlled as BaseCodeMirror } from 'react-codemirror2';
import PerfectScrollbar from 'react-perfect-scrollbar';
import styled from 'styled-components';
import { get } from "../../../utils/theme";
import { ScrollbarStyles } from "./ps-scrollbar";
import * as themes from "./themes";
import 'codemirror/mode/markdown/markdown';
import 'codemirror/mode/javascript/javascript';
import 'codemirror/mode/jsx/jsx';
import 'codemirror/mode/css/css';
import 'codemirror/addon/edit/matchbrackets';
import 'codemirror/addon/edit/closetag';
import 'codemirror/addon/fold/xml-fold';
var Scrollbar = styled(PerfectScrollbar).withConfig({
  displayName: "CodeMirror__Scrollbar"
})(["overflow:auto;position:relative;max-height:", "px;.ps__rail-y{z-index:9;opacity:0.4;}"], function (p) {
  return 25 * p.linesToScroll;
});
var preStyles = get('styles.pre');
var EditorStyled = styled(BaseCodeMirror).withConfig({
  displayName: "CodeMirror__EditorStyled"
})(["", ";", ";position:relative;flex:1;.CodeMirror{max-width:100%;height:100%;}.CodeMirror-gutters{left:1px !important;}.CodeMirror-lines{padding:10px 0;box-sizing:content-box;}.CodeMirror-line{padding:0 10px;}.CodeMirror-linenumber{padding:0 7px 0 5px;}&,.CodeMirror pre{", ";}"], themes.dark, themes.light, preStyles);
var scrollbarOpts = {
  wheelSpeed: 2,
  wheelPropagation: true,
  minScrollbarLength: 20,
  suppressScrollX: true
};

var noCurrent = function noCurrent(val) {
  return !val || !val.current;
};

var CodeMirror = function CodeMirror(props) {
  var _useConfig = useConfig(),
      themeConfig = _useConfig.themeConfig;

  var editor = useRef(null);
  var forceUpdateEditorTimeout = useRef(0);
  var previousEditor = useRef(0);
  var linesToScroll = themeConfig.linesToScrollEditor || 14;

  var editorProps = _objectSpread({}, props, {
    editorDidMount: function editorDidMount(codemirror) {
      props.editorDidMount && props.editorDidMount(codemirror);
      editor.current = codemirror;
    }
  });

  var refreshCodeMirror = function refreshCodeMirror() {
    if (noCurrent(editor)) return;
    editor.current.refresh();
  };

  var clearForceUpdateCodeMirror = function clearForceUpdateCodeMirror() {
    if (noCurrent(forceUpdateEditorTimeout)) return;
    clearTimeout(forceUpdateEditorTimeout.current);
  };

  var forceUpdateCodeMirror = function forceUpdateCodeMirror() {
    if (noCurrent(editor)) return;
    clearForceUpdateCodeMirror();
    forceUpdateEditorTimeout.current = setTimeout(function () {
      var currentHeight = editor.current.getScrollInfo().height || 0;
      var hasNoHeight = currentHeight <= 0; // Don't refresh if no height (CodeMirror is not visible) or
      // Don't refresh if same height

      if (hasNoHeight || previousEditor === currentHeight) return;
      refreshCodeMirror();
      previousEditor.current = editor.current.getScrollInfo().height || 0;
    });
  };

  useEffect(function () {
    forceUpdateCodeMirror();
    return function () {
      return clearForceUpdateCodeMirror();
    };
  }, []);
  return React.createElement(React.Fragment, null, React.createElement(ScrollbarStyles, null), React.createElement(Scrollbar, {
    option: scrollbarOpts,
    linesToScroll: linesToScroll
  }, React.createElement(EditorStyled, editorProps)));
};

export default CodeMirror;