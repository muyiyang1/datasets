function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import { Fragment } from 'react';
import { useState, useEffect, useCallback, useMemo } from 'react';
import { useConfig } from 'docz';
import { LiveProvider, LiveError, LivePreview } from 'react-live';
import styled, { css } from 'styled-components';
import rgba from 'polished/lib/color/rgba';
import Resizable from 're-resizable';
import getter from 'lodash/get';
import { Storage } from "../../../utils/storage";
import { get as themeGet } from "../../../utils/theme";
import { ResizeBar } from "./ResizeBar";
import { ActionsBar } from "./ActionsBar";
import { Handle, HANDLE_SIZE } from "./Handle";
import { Editor as PreBase } from "../Editor";
import { useHotkeys } from "../../../utils/hotkeys";

var whenFullscreen = function whenFullscreen(on, off) {
  return function (p) {
    return p.full ? on : off;
  };
};

var Overlay = styled.div.withConfig({
  displayName: "Playground__Overlay"
})(["top:0;left:0;z-index:", ";position:", ";width:", ";height:", ";padding:", ";margin:", ";background:", ";box-sizing:border-box;transition:background 0.3s;"], whenFullscreen(9999, 0), whenFullscreen('fixed', 'relative'), whenFullscreen('100vw', 'auto'), whenFullscreen('100vh', 'auto'), whenFullscreen('60px 20px 20px', '0px'), whenFullscreen('0px', '0 0 30px'), whenFullscreen('rgba(0,0,0,0.5)', 'transparent'));
var borderColor = themeGet('colors.border');
var minusHandleSize = "calc(100% - ".concat(HANDLE_SIZE, " + 4px)");
var Wrapper = styled.div.withConfig({
  displayName: "Playground__Wrapper"
})(["display:flex;flex-direction:column;height:", ";width:", ";border:1px solid ", ";"], whenFullscreen(minusHandleSize, '100%'), minusHandleSize, borderColor);
var backgroundColor = themeGet('colors.background');
var PreviewWrapper = styled.div.withConfig({
  displayName: "Playground__PreviewWrapper"
})(["position:relative;flex:1;border-bottom:1px solid ", ";background:", ";min-height:", ";"], borderColor, backgroundColor, whenFullscreen('198px', 'auto'));
var StyledPreviewWrapper = styled.div.withConfig({
  displayName: "Playground__StyledPreviewWrapper"
})(["position:relative;box-sizing:border-box;width:100%;", ";"], themeGet('styles.playground'));
var StyledError = styled(LiveError).withConfig({
  displayName: "Playground__StyledError"
})(["position:absolute;top:0;left:0;width:calc(100% - 40px);height:calc(100% - 40px);padding:20px;background:", ";font-size:16px;color:white;"], rgba('black', 0.8));
var Pre = styled(PreBase).withConfig({
  displayName: "Playground__Pre"
})(["box-sizing:content-box;width:calc(100% - 2px);border-radius:0 !important;border-bottom:0;border-left:0;margin:0;"]);
var editorStyle = css(["border-top:0;"]);

var fromStorage = function fromStorage(storage) {
  return function (key, defaultValue) {
    var obj = storage.get();
    return obj ? getter(obj, key) : defaultValue;
  };
};

export var Playground = function Playground(_ref) {
  var position = _ref.position,
      initialCode = _ref.code,
      codesandbox = _ref.codesandbox,
      className = _ref.className,
      style = _ref.style,
      scope = _ref.scope,
      _ref$wrapper = _ref.wrapper,
      CustomWrapper = _ref$wrapper === void 0 ? Fragment : _ref$wrapper;

  var _useConfig = useConfig(),
      themeConfig = _useConfig.themeConfig,
      native = _useConfig.native;

  var initialShowEditor = getter(themeConfig, 'showPlaygroundEditor');
  var storage = useMemo(function () {
    return new Storage("doczPlayground-".concat(position));
  }, []);
  var atPos = fromStorage(storage);
  var initialFullscreen = atPos('fullscreen', false);
  var initialWidth = atPos('width', '100%');
  var initialHeight = atPos('height', '100%');

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      key = _useState2[0],
      setKey = _useState2[1];

  var _useState3 = useState(initialCode),
      _useState4 = _slicedToArray(_useState3, 2),
      code = _useState4[0],
      setCode = _useState4[1];

  var _useState5 = useState(function () {
    return initialFullscreen;
  }),
      _useState6 = _slicedToArray(_useState5, 2),
      fullscreen = _useState6[0],
      setFullscreen = _useState6[1];

  var _useState7 = useState(function () {
    return initialWidth;
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      width = _useState8[0],
      setWidth = _useState8[1];

  var _useState9 = useState(function () {
    return initialHeight;
  }),
      _useState10 = _slicedToArray(_useState9, 2),
      height = _useState10[0],
      setHeight = _useState10[1];

  var _useState11 = useState(function () {
    return Boolean(initialShowEditor);
  }),
      _useState12 = _slicedToArray(_useState11, 2),
      showEditor = _useState12[0],
      setShowEditor = _useState12[1];

  var state = {
    fullscreen: fullscreen,
    width: width,
    height: height,
    code: code,
    key: key,
    showEditor: showEditor
  };
  var resizableProps = useMemo(function () {
    return {
      minHeight: fullscreen ? 360 : '100%',
      minWidth: 260,
      maxWidth: '100%',
      maxHeight: '100%',
      size: {
        width: width,
        height: height
      },
      style: {
        margin: '0 auto '
      },
      enable: {
        top: false,
        right: true,
        bottom: fullscreen,
        left: false,
        topRight: false,
        bottomRight: fullscreen,
        bottomLeft: false,
        topLeft: false
      },
      handleComponent: {
        right: function right() {
          return React.createElement(Handle, {
            full: fullscreen,
            horizontal: true
          });
        },
        bottom: function bottom() {
          return React.createElement(Handle, {
            full: fullscreen,
            horizontal: false
          });
        }
      },
      onResizeStop: function onResizeStop(e, direction, ref, d) {
        var width = ref.style.width;
        var height = ref.style.height;
        handleSetSize(width, height);
      }
    };
  }, [fullscreen, width, height]);
  var editorProps = {
    css: editorStyle,
    actions: React.createElement(Fragment, null)
  };
  var setStorageProp = useCallback(function (fullscreen) {
    storage.set(_objectSpread({}, state, {
      fullscreen: fullscreen
    }));
  }, []);

  var handleToggleFullscreen = function handleToggleFullscreen() {
    if (fullscreen) storage.delete();else setStorageProp(true);
    setFullscreen(atPos('fullscreen', false));
    setWidth(atPos('width', '100%'));
    setHeight(atPos('width', '100%'));
  };

  var handleToggleShowEditor = useCallback(function () {
    setShowEditor(function (s) {
      return !s;
    });
  }, []);
  var handleSetSize = useCallback(function (width, height) {
    var current = atPos('fullscreen', false);
    setWidth(width);
    setHeight(height);
    setStorageProp(current);
  }, []);
  var handleRefresh = useCallback(function () {
    setKey(key + 1);
  }, []);
  var transformCode = useCallback(function (code) {
    if (code.startsWith('()') || code.startsWith('class')) return code;
    return "<React.Fragment>".concat(code, "</React.Fragment>");
  }, [code]);
  var codesandboxUrl = useCallback(function (native) {
    var url = 'https://codesandbox.io/api/v1/sandboxes/define';
    return "".concat(url, "?parameters=").concat(codesandbox).concat(native ? "&editorsize=75" : "");
  }, [codesandbox, native]);
  var unloadListener = useCallback(function () {
    storage.delete();
  }, []);
  var addUnloadListener = useCallback(function () {
    if (window && typeof window !== 'undefined') {
      window.addEventListener('beforeunload', unloadListener, false);
    }
  }, []);
  var removeUnloadListener = useCallback(function () {
    if (window && typeof window !== 'undefined') {
      window.removeEventListener('beforeunload', unloadListener, false);
    }
  }, []);
  useEffect(function () {
    addUnloadListener();
    return function () {
      return removeUnloadListener();
    };
  }, []);
  useEffect(function () {
    if (window && typeof window !== 'undefined') {
      var method = fullscreen ? 'add' : 'remove';
      document.body.classList[method]('with-overlay');
    }
  }, [fullscreen]);
  useHotkeys('esc', function () {
    fullscreen && handleToggleFullscreen();
  });
  return React.createElement(LiveProvider, {
    code: code,
    scope: scope,
    transformCode: transformCode
  }, React.createElement(Overlay, {
    full: fullscreen
  }, fullscreen ? React.createElement(ResizeBar, {
    onChangeSize: handleSetSize
  }) : null, React.createElement(Resizable, resizableProps, React.createElement(Wrapper, {
    full: fullscreen
  }, React.createElement(PreviewWrapper, {
    full: fullscreen
  }, React.createElement(StyledPreviewWrapper, null, React.createElement(CustomWrapper, null, React.createElement(LivePreview, {
    className: className,
    style: style
  }))), React.createElement(StyledError, null)), React.createElement(ActionsBar, _extends({
    fullscreen: fullscreen,
    showEditor: showEditor,
    code: code
  }, {
    codesandboxUrl: codesandboxUrl(native),
    onClickRefresh: handleRefresh,
    onClickEditor: handleToggleShowEditor,
    onClickFullscreen: handleToggleFullscreen
  })), showEditor && React.createElement(Pre, _extends({}, editorProps, {
    onChange: setCode,
    readOnly: false
  }), code)))));
};