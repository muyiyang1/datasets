function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import { useMemo, useEffect, useRef, useState } from 'react';
import { useConfig, usePrevious } from 'docz';
import styled, { css } from 'styled-components';
import { MenuHeadings } from "./MenuHeadings";
import { get } from "../../../utils/theme";
var activeWrapper = css(["padding-left:0;&:after{width:1px;}"]);
var Wrapper = styled.div.withConfig({
  displayName: "MenuLink__Wrapper"
})(["position:relative;transition:padding 0.2s;&:after{position:absolute;display:block;content:'';top:30px;left:24px;width:0;height:calc(100% - 36px);border-left:1px dashed ", ";transition:width 0.2s;}", ";"], get('colors.sidebarBorder'), function (p) {
  return p.active && activeWrapper;
});
export var createLink = function createLink(Link) {
  return styled(Link).withConfig({
    displayName: "MenuLink"
  })(["position:relative;display:block;padding:4px 24px;font-weight:600;font-size:18px;letter-spacing:-0.02em;color:", ";text-decoration:none;transition:color 0.2s;&:hover,&:visited{color:", ";}&:hover,&.active{color:", ";font-weight:600;}"], get('colors.sidebarText'), get('colors.sidebarText'), function (p) {
    return get('colors.sidebarPrimary')(p) || get('colors.primary')(p);
  });
};
var LinkAnchor = createLink(styled.a.withConfig({
  displayName: "MenuLink__LinkAnchor"
})([""]));

var getActiveByLocation = function getActiveByLocation(route) {
  if (typeof window === 'undefined') return;
  return location.pathname.slice(0, location.pathname.length - 1) === route;
};

var getActiveFromClass = function getActiveFromClass(el, route) {
  var activeByClass = el && el.classList.contains('active');
  var activeByLocation = route && getActiveByLocation(route);
  return Boolean(activeByClass || activeByLocation);
};

var checkActiveClass = function checkActiveClass($el, isActive) {
  if (!isActive) return;

  if (isActive && !$el.classList.contains('active')) {
    $el.classList.add('active');
  }
};

export var MenuLink = React.forwardRef(function (_ref, ref) {
  var item = _ref.item,
      children = _ref.children,
      onClick = _ref.onClick,
      onActiveChange = _ref.onActiveChange;

  var _useConfig = useConfig(),
      linkComponent = _useConfig.linkComponent;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];

  var prevActive = usePrevious(active);
  var $el = useRef(ref);
  var Link = useMemo(function () {
    return createLink(linkComponent);
  }, [linkComponent]);
  var linkProps = {
    children: children,
    onClick: onClick
  };
  useEffect(function () {
    var isActive = getActiveFromClass($el.current, item.route);

    if (prevActive !== isActive) {
      setActive(isActive);
      $el && checkActiveClass($el.current, isActive);
      onActiveChange && onActiveChange(isActive);
    }
  });
  return React.createElement(Wrapper, {
    active: active
  }, item.route ? React.createElement(Link, _extends({}, linkProps, {
    to: item.route,
    innerRef: $el,
    activeClassName: "active",
    partiallyActive: true
  })) : React.createElement(LinkAnchor, _extends({}, linkProps, {
    ref: $el,
    href: item.href || '#',
    target: item.href ? '_blank' : '_self'
  }, !item.href && {
    onClick: function onClick(ev) {
      ev.preventDefault();
      linkProps.onClick && linkProps.onClick(ev);
    }
  })), active && item.route && React.createElement(MenuHeadings, {
    route: item.route
  }));
});