function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import { useState } from 'react';
import ChevronDown from 'react-feather/dist/icons/chevron-down';
import styled from 'styled-components';
import { MenuLink } from "./MenuLink";
import { get } from "../../../utils/theme";
var Wrapper = styled.div.withConfig({
  displayName: "Menu__Wrapper"
})(["display:flex;flex-direction:column;"]);
var List = styled.dl.withConfig({
  displayName: "Menu__List"
})(["flex:1;overflow-y:auto;visibility:", ";max-height:", ";"], function (p) {
  return p.opened ? 'visible' : 'hidden';
}, function (p) {
  return p.opened ? 'auto' : '0px';
});

var iconRotate = function iconRotate(p) {
  return p.opened ? '-180deg' : '0deg';
};

var Icon = styled.div.withConfig({
  displayName: "Menu__Icon"
})(["position:absolute;top:50%;right:20px;transform:translateY(-50%) rotate(", ");transform-origin:50% 50%;transition:transform 0.3s;& svg{stroke:", ";}"], iconRotate, get('colors.sidebarText'));
export var Menu = function Menu(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      opened = _useState2[0],
      setOpened = _useState2[1];

  var toggle = function toggle() {
    return setOpened(function (s) {
      return !s;
    });
  };

  var item = props.item,
      sidebarToggle = props.sidebarToggle,
      collapseAll = props.collapseAll;
  var show = collapseAll || opened;
  var hasChildren = !item.href && item.menu && item.menu.length > 0;
  var hasToggle = !item.href && !item.route;

  var handleToggle = function handleToggle(ev) {
    ev.preventDefault();
    toggle();
  };

  return React.createElement(Wrapper, null, React.createElement(MenuLink, _extends({
    item: item
  }, hasToggle && {
    onClick: handleToggle
  }), item.name, hasChildren && React.createElement(Icon, {
    opened: show
  }, React.createElement(ChevronDown, {
    size: 15
  }))), hasChildren && React.createElement(List, {
    opened: show
  }, item.menu && item.menu.map(function (item) {
    return React.createElement("dt", {
      key: item.id
    }, React.createElement(MenuLink, {
      item: item,
      onClick: sidebarToggle,
      onActiveChange: setOpened
    }, item.name));
  })));
};