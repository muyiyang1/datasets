function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { ThemeProvider as StyledThemeProvider } from 'styled-components';
import { useConfig } from 'docz';
import getter from 'lodash/get';
export var get = function get(val, defaultValue) {
  return function (p) {
    return getter(p, "theme.docz.".concat(val), defaultValue);
  };
};
export var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children;
  var config = useConfig();

  var next = function next(prev) {
    return _objectSpread({}, prev, {
      docz: config.themeConfig
    });
  };

  return React.createElement(StyledThemeProvider, {
    theme: next
  }, React.createElement(React.Fragment, null, children));
};